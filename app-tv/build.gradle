apply plugin: 'com.android.application'
apply plugin: 'com.gfd.comswitch'
apply plugin: 'androidx.navigation.safeargs'

//apply from: rootProject.file('releaseinfo.gradle')
apply from: rootProject.file('libbase.gradle')

kapt {
    arguments {
        arg("AROUTER_MODULE_NAME", project.getName())
    }
}

def keystoreProperties = new Properties()
def keystorePropertiesFile = file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
} else {
    throw new GradleException("Could not find key.properties!")
}

android {
//    resourcePrefix "app_"
    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }
    defaultConfig {
        applicationId rootProject.ext.android.applicationId
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName
    }
    buildTypes {
        debug {
            minifyEnabled false
            signingConfig signingConfigs.release
        }
        release {
            minifyEnabled true  // 混淆编译
            shrinkResources true // 混淆编译
            zipAlignEnabled true // zipalign优化
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
    //自定义输出apk名字
    applicationVariants.all {
        variant ->
            variant.outputs.all {
                if (variant.getBuildType().getName() == 'release') {
                    outputFileName = new File("app_v" + variant.versionName + "_" +
                            new Date().format("yyyy-MM-dd_HH", TimeZone.getTimeZone("UTC")) + "_" +
                            variant.getBuildType().getName() + ".apk")
                }
            }
    }
}

dependencies {
    implementation project(':common')
    kapt dependence.libArouterCompiler

    // navigation
    implementation dependence.libNavigationFragmentKtx
    implementation dependence.libNavigationUiKtx

    // Image
    // 2.0.0 CloseableReference: Finalized without closing
    // @see https://github.com/facebook/fresco/issues/2445
    implementation 'com.facebook.fresco:fresco:2.0.0'
    // 图片取色
    implementation 'androidx.palette:palette:1.0.0'

    // WorkManger
    implementation "androidx.work:work-runtime-ktx:2.3.0"

    // 内存泄漏
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.1'
}